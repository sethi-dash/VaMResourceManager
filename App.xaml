<Application x:Class="Vrm.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:controls="clr-namespace:WpfToolkit.Controls;assembly=VirtualizingWrapPanel"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:util="clr-namespace:Vrm.Util"
             xmlns:vm="clr-namespace:Vrm.Vm"
             xmlns:control="clr-namespace:Vrm.Control"
             xmlns:window="clr-namespace:Vrm.Window"
             Startup="App_Startup" Exit="App_Exit">

    <Application.Resources>

        <util:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        <util:BoolInverterConverter x:Key="BoolInverter"/>
        <util:FileSizeConverter x:Key="FileSizeConverter"/>
        <util:RefOpsVisibilityConverter x:Key="RefOpsVisibilityConverter"/>
        <util:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
        <util:StringNullOrEmptyToVisibilityConverter x:Key="StringNullOrEmptyToVisibilityConverter"/>
        <util:TestValueConverter x:Key="TestValueConverter"/>
        
        
        <Style x:Key="ModernToggleSwitch" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="#FFE0E0E0"/>
            <Setter Property="Foreground" Value="#333333"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid>
                            <!-- Main container -->
                            <Border x:Name="border" 
                                    Width="{TemplateBinding Width}"
                                    Height="{TemplateBinding Height}"
                                    Background="{TemplateBinding Background}"
                                    CornerRadius="3"
                                    SnapsToDevicePixels="True">
                                
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="10"/> <!-- Left safe area -->
                                        <ColumnDefinition Width="*"/>  <!-- Switch movement area -->
                                        <ColumnDefinition Width="10"/> <!-- Right safe area -->
                                    </Grid.ColumnDefinitions>
                                    
                                    <!-- Centered text -->
                                    <TextBlock x:Name="contentText"
                                               Grid.ColumnSpan="3"
                                               Text="{TemplateBinding Content}"
                                               Foreground="{TemplateBinding Foreground}"
                                               VerticalAlignment="Center"
                                               HorizontalAlignment="Center"
                                               FontFamily="Segoe UI"
                                               FontSize="12"/>
                                    
                                    <!-- Switch movement area -->
                                    <Border x:Name="track" 
                                            Grid.Column="0" Grid.ColumnSpan="3"
                                            Background="Transparent">

                                        <!-- Elongated rectangular switch -->
                                        <Border x:Name="thumb"
                                                Width="12"
                                                Height="{TemplateBinding Height}"
                                                Background="White"
                                                CornerRadius="2"
                                                HorizontalAlignment="Left"
                                                VerticalAlignment="Center"
                                                Margin="2,0,0,0">
                                            <Border.Effect>
                                                <DropShadowEffect ShadowDepth="1" Color="#40000000" BlurRadius="2"/>
                                            </Border.Effect>
                                        </Border>
                                    </Border>
                                </Grid>
                            </Border>
                        </Grid>
                        
                        <ControlTemplate.Triggers>
                            <!-- On state -->
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="border" Property="Background">
                                    <Setter.Value>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                            <GradientStop Color="#D1B2FF" Offset="0"/>
                                            <GradientStop Color="#7E57C2" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="thumb" Property="HorizontalAlignment" Value="Right"/>
                                <Setter TargetName="contentText" Property="Foreground" Value="White"/>
                            </Trigger>
                            
                            <!-- Off state -->
                            <Trigger Property="IsChecked" Value="False">
                                <Setter TargetName="border" Property="Background" Value="#FFE0E0E0"/>
                                <Setter TargetName="thumb" Property="HorizontalAlignment" Value="Left"/>
                                <Setter TargetName="contentText" Property="Foreground" Value="#FF333333"/>
                            </Trigger>
                            
                            <!-- Hover effects (only for the off state) -->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsChecked" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="border" Property="Background" Value="#FFD5D5D5"/>
                            </MultiTrigger>
                            
                            <!-- Press effects -->
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="thumb" Property="RenderTransform">
                                    <Setter.Value>
                                        <ScaleTransform ScaleX="0.9" ScaleY="0.9"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="thumb" Property="RenderTransformOrigin" Value="0.5,0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Cursor" Value="Hand"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="CustomListViewItemStyle" TargetType="{x:Type ListViewItem}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Border 
                            x:Name="Bd"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                            <ContentPresenter />
                        </Border>
                        <ControlTemplate.Triggers>
                            <!-- Selected element (with focus) -->
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                <Setter TargetName="Bd" Property="BorderBrush" Value="LightBlue"/> <!-- Border color can be changed -->
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            </Trigger>

                            <!-- Selected element (without focus) -->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="True"/>
                                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                <Setter TargetName="Bd" Property="BorderBrush" Value="LightBlue"/> <!-- Same border as when focused -->
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            </MultiTrigger>

                            <!-- Mouse hover -->
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="DodgerBlue"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="TabHeaderStyle" TargetType="{x:Type TabItem}">
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="HeaderTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <TextBlock Text="{Binding NameFull}" Opacity="{Binding Opacity}"/>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Visibility" Value="{Binding IsVisible, Converter={StaticResource BoolToVisibilityConverter}}" />
        </Style>

        <Style x:Key="CrossButtonStyle" TargetType="Button">
            <Setter Property="Width" Value="20"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="ToolTip" Value="Remove"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Background="Transparent">
                            <Border BorderThickness="0" Margin="4">
                                <Path x:Name="Cross"
                                      SnapsToDevicePixels="True"
                                      Stretch="UniformToFill"
                                      Stroke="DarkGray"
                                      StrokeThickness="2"
                                      Data="M 4 4 L 16 16 M 16 4 L 4 16"
                                      StrokeStartLineCap="Round"
                                      StrokeEndLineCap="Round">
                                </Path>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Cross" Property="Stroke" Value="Red"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="EyeButtonStyle" TargetType="Button">
            <Setter Property="Width" Value="20"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="ToolTip" Value="Begin View"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Background="Transparent">
                            <Border BorderThickness="0" Margin="2">
                                <Path x:Name="Eye"
                                      SnapsToDevicePixels="True"
                                      Stretch="Uniform"
                                      Stroke="DarkGray"
                                      StrokeThickness="1.5"
                                      Fill="Transparent"
                                      Data="M1,10 C3.5,4 8.5,4 11,10 C8.5,16 3.5,16 1,10 Z
                                    M6,10 A1.5,1.5 0 1 1 3,10 A1.5,1.5 0 1 1 6,10 Z"
                                      StrokeStartLineCap="Round"
                                      StrokeEndLineCap="Round"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Eye" Property="Stroke" Value="Green"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="EditButtonStyle" TargetType="Button">
            <Setter Property="Width" Value="20"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="ToolTip" Value="Begin Edit"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Background="Transparent">
                            <Border BorderThickness="0" Margin="2">
                                <Path x:Name="path"
                                      SnapsToDevicePixels="True"
                                      Stretch="Uniform"
                                      Stroke="DarkGray"
                                      StrokeThickness="1.5"
                                      Fill="Transparent"
                                      Data="M3,17.25V21h3.75L17.81,9.94l-3.75-3.75L3,17.25z M20.71,7.04c0.39-0.39,0.39-1.02,0-1.41
            l-2.34-2.34c-0.39-0.39-1.02-0.39-1.41,0l-1.83,1.83l3.75,3.75L20.71,7.04z"
                                      StrokeStartLineCap="Round"
                                      StrokeEndLineCap="Round"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="path" Property="Stroke" Value="Brown"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="RenameButtonStyle" TargetType="Button">
            <Setter Property="Width" Value="20"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="ToolTip" Value="Rename"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Background="Transparent">
                            <Border BorderThickness="0" Margin="2">
                                <Path x:Name="path"
                                      SnapsToDevicePixels="True"
                                      Stretch="Uniform"
                                      Stroke="DarkGray"
                                      StrokeThickness="1.5"
                                      Fill="Transparent"
                                      Data="M3,17h2l1-3h4l1,3h2L9,5H7L3,17z M7.5,7L9,12H6L7.5,7z M14,10v6h2v-4h2v-2h-4z"
                                      StrokeStartLineCap="Round"
                                      StrokeEndLineCap="Round"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="path" Property="Stroke" Value="Gray"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <GroupStyle x:Key="GroupHeaderStyle">
            <GroupStyle.Panel>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel Orientation="Vertical" />
                </ItemsPanelTemplate>
            </GroupStyle.Panel>
            <GroupStyle.ContainerStyle>
                <!-- orginal WPF style but with zero Margin on the ItemsPresenter -->
                <Style TargetType="{x:Type GroupItem}">
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type GroupItem}">
                                <StackPanel>
                                    <ContentPresenter
                                        Content="{TemplateBinding ContentControl.Content}"
                                        ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                        ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                        Name="PART_Header" />
                                    <ItemsPresenter Name="ItemsPresenter" Margin="0" />
                                </StackPanel>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </GroupStyle.ContainerStyle>
            <GroupStyle.HeaderTemplate>
                <DataTemplate>
                    <StackPanel Background="Gray">
                        <ContentPresenter Content="{Binding}" Margin="4 2 0 2" TextBlock.Foreground="White"/>
                    </StackPanel>
                </DataTemplate>
            </GroupStyle.HeaderTemplate>
        </GroupStyle>

        <DataTemplate DataType="{x:Type vm:VmCheckedCb}">
            <DataTemplate.Resources>
                <DataTemplate x:Key="DropDownItemTemplate">
                    <Grid>
                        <CheckBox Content="{Binding Display}" IsChecked="{Binding IsChecked}" Margin="2 2 2 0" Visibility="{Binding Action, Converter={StaticResource NullToVisibilityConverter}}"/>
                        <ContentPresenter Content="{Binding Action}" Margin="2 2 2 0" Visibility="{Binding Action, Converter={StaticResource NullToVisibilityConverter}, ConverterParameter=inverse}"/>
                    </Grid>
                </DataTemplate>

                <DataTemplate x:Key="SelectionBoxTemplate">
                    <TextBlock x:Name="tbStatus" Margin="3 0 3 0" Text="{Binding DataContext.Status, RelativeSource={RelativeSource AncestorType=ComboBox}}"
                               Foreground="{Binding DataContext.TextBrush, RelativeSource={RelativeSource AncestorType=ComboBox}}"/>
                </DataTemplate>

                <Style x:Key="GroupingComboBoxStyle" TargetType="ComboBox">
                    <Setter Property="ItemTemplate" Value="{StaticResource DropDownItemTemplate}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ComboBox">
                                <Grid>
                                    <ToggleButton x:Name="ToggleButton"
                                                  Background="{TemplateBinding Background}"
                                                  Focusable="false"
                                                  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                  ClickMode="Press">
                                        <ToggleButton.Template>
                                            <ControlTemplate TargetType="ToggleButton">
                                                <Border x:Name="Border" 
                                                        CornerRadius="3"
                                                        Background="{TemplateBinding Background}"
                                                        BorderBrush="{TemplateBinding BorderBrush}"
                                                        BorderThickness="{TemplateBinding BorderThickness}"
                                                        SnapsToDevicePixels="true">
                                                    <ContentPresenter x:Name="ContentPresenter"
                                                                      ContentTemplate="{StaticResource SelectionBoxTemplate}"
                                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                </Border>
                                            </ControlTemplate>
                                        </ToggleButton.Template>
                                    </ToggleButton>
                                    <Popup x:Name="Popup"
                                           Placement="Bottom"
                                           Focusable="False"
                                           AllowsTransparency="True"
                                           IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                           PopupAnimation="Slide">
                                        <Border x:Name="DropDownBorder"
                                                BorderThickness="1"
                                                Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                                                BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
                                                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                                MinWidth="{TemplateBinding ActualWidth}">
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="*"/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                                <ScrollViewer>
                                                    <ItemsPresenter/>
                                                </ScrollViewer>
                                                <TextBlock Margin="4" Grid.Row="1" Text="{Binding DataContext.FooterText, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                           Visibility="{Binding DataContext.FooterText, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource StringNullOrEmptyToVisibilityConverter}}"/>
                                            </Grid>
                                        </Border>
                                    </Popup>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </DataTemplate.Resources>
            <ComboBox Style="{StaticResource GroupingComboBoxStyle}" SelectedIndex="0" ItemsSource="{Binding Items}" IsDropDownOpen="{Binding IsPopupOpen, Mode=TwoWay}" HorizontalAlignment="Left" Background="Transparent">
                <ComboBox.ItemContainerStyle>
                    <Style TargetType="ComboBoxItem">
                        <Setter Property="Padding" Value="0"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ComboBoxItem">
                                    <ContentPresenter/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ComboBox.ItemContainerStyle>
            </ComboBox>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmMain}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="{Binding PanelWidth, Mode=TwoWay}" MaxWidth="800"/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Border Grid.Row="0" Grid.RowSpan="2" BorderBrush="LightGray" BorderThickness="1">
                    <ContentPresenter Content="{Binding Refs}"/>
                </Border>

                <GridSplitter Grid.Column="1"
                              IsEnabled="{Binding IsReferencesEnabled, Mode=OneWay}"
                              Grid.Row="0" Grid.RowSpan="2"
                              Background="Transparent"
                              HorizontalAlignment="Stretch"
                              VerticalAlignment="Stretch"
                              ResizeBehavior="PreviousAndNext"
                              ShowsPreview="True"/>

                <ContentPresenter Grid.Column="2" Grid.Row="0" Content="{Binding Progress}" Height="6" Margin="0 0 0 3" Visibility="{Binding Path=DataContext.IsBusy, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource Mode=Self}}"/>
                <TabControl Margin="0 0 0 0" Grid.Row="1" Grid.Column="2" ItemsSource="{Binding Tabs}" SelectedItem="{Binding SelectedTab}" DisplayMemberPath="NameFull" ItemContainerStyle="{StaticResource TabHeaderStyle}"/>
            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmCmdBtn}">
            <Button Content="{Binding Caption}" Command="{Binding Command}" Margin="2 2 0 2" ToolTip="{Binding Tooltip}" Visibility="{Binding IsVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                <Button.Template>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3">
                            <ContentPresenter HorizontalAlignment="Center" Margin="4 2 4 2"
                                              VerticalAlignment="Center"
                                              RecognizesAccessKey="True"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="Background" Value="#FFBEE6FD"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="#FF3C7FB1"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="border" Property="Background" Value="#FFC4E5F6"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="#FF2C628B"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="border" Property="Background" Value="#FFE6E6E6"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="#FFAAAAAA"/>
                                <Setter Property="Foreground" Value="#FF888888"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Button.Template>
            </Button>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmProgress}">
            <ProgressBar IsIndeterminate="True" 
                         Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibilityConverter}}"
                         Foreground="SteelBlue"/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmJsonTree}">
            <TreeView ItemsSource="{Binding JsonNodes}" BorderThickness="0">
                <TreeView.ItemContainerStyle>
                    <Style TargetType="TreeViewItem">
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                    </Style>
                </TreeView.ItemContainerStyle>
                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                        <TextBlock Text="{Binding Display}" />
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
            </TreeView>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmFileInfos}">
            <ListView x:Name="lv" ItemsSource="{Binding Items}" SelectedItem="{Binding SelectedFile}" BorderThickness="0">
                <ListView.View>
                    <GridView AllowsColumnReorder="False">
                        <GridViewColumn Header="Name" DisplayMemberBinding="{Binding Name}" Width="130"/>
                        <GridViewColumn Header="Size (Mb)">
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Length, Converter={StaticResource FileSizeConverter}}"/>
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                        <GridViewColumn Header="Actions" Width="160">
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" >
                                        <Button Content="Locate" 
                                                Command="{Binding DataContext.CmdLocate, ElementName=lv}"
                                                CommandParameter="{Binding}"
                                                Margin="0,0,5,0" Padding="5,0"/>
                                        <Button Content="Open" 
                                                Command="{Binding DataContext.CmdOpen, ElementName=lv}"
                                                CommandParameter="{Binding}"
                                                Padding="5,0"/>
                                    </StackPanel>
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                    </GridView>
                </ListView.View>
            </ListView>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmMetaRaw}">
            <TextBox IsReadOnly="True" Text="{Binding MetaJson}" TextWrapping="Wrap" AcceptsReturn="True" VerticalScrollBarVisibility="Auto" BorderThickness="0"/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmTextRaw}">
            <Grid>
                <ListBox ItemsSource="{Binding Lines}"
                         BorderThickness="0"
                         Background="White"
                         Foreground="Black"
                         Focusable="False"
                         ScrollViewer.VerticalScrollBarVisibility="Auto"
                         VirtualizingStackPanel.IsVirtualizing="True"
                         VirtualizingStackPanel.VirtualizationMode="Recycling"
                         ScrollViewer.IsDeferredScrollingEnabled="True">
                    <ListBox.ItemContainerStyle>
                        <Style TargetType="ListBoxItem">
                            <Setter Property="Padding" Value="0"/>
                            <Setter Property="Margin" Value="0"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="Focusable" Value="False"/>
                            <Setter Property="IsHitTestVisible" Value="False"/>
                            <Setter Property="Background" Value="Transparent"/>
                        </Style>
                    </ListBox.ItemContainerStyle>
                </ListBox>
                <Button Content="&#x1F5D2;" ToolTip="Open in notepad" Command="{Binding CmdOpen}" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0 0 20 0"/>
            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmImageElement}">
            <Grid Width="{Binding Path=ImgSize, Mode=OneWay, Source={x:Static util:UIState.Instance}}"
                  Height="{Binding Path=ImgSize, Mode=OneWay, Source={x:Static util:UIState.Instance}}"
                  ToolTip="{Binding FullName}">
                <control:LazyImage SourcePath="{Binding ImagePath}" Margin="2"
                                   HorizontalAlignment="Center" VerticalAlignment="Center"/>
                <CheckBox IsChecked="{Binding IsChecked}" Content="" HorizontalAlignment="Right" VerticalAlignment="Top"
                          Visibility="{Binding IsEditMode, RelativeSource={RelativeSource AncestorType=window:CustomWindow}, Converter={StaticResource BoolToVisibilityConverter}}">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="Checked">
                            <b:InvokeCommandAction Command="{Binding DataContext.CmdOnChecked, RelativeSource={RelativeSource AncestorType=ItemsControl}}"
                                                   CommandParameter="{Binding}" />
                        </b:EventTrigger>
                        <b:EventTrigger EventName="Unchecked">
                            <b:InvokeCommandAction Command="{Binding DataContext.CmdOnUnchecked, RelativeSource={RelativeSource AncestorType=ItemsControl}}"
                                                   CommandParameter="{Binding}" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </CheckBox>
            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmToolLogger}">
            <ListView ItemsSource="{Binding LogMessages}"
                      ScrollViewer.CanContentScroll="False"
                      VirtualizingStackPanel.IsVirtualizing="True"
                      VirtualizingStackPanel.VirtualizationMode="Recycling"
                      VirtualizingPanel.IsVirtualizingWhenGrouping="True"
                      ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                      ScrollViewer.VerticalScrollBarVisibility="Auto"
                      BorderThickness="0">
                <ListView.ItemsPanel>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel />
                    </ItemsPanelTemplate>
                </ListView.ItemsPanel>
            </ListView>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmActions}">
            <ItemsControl ItemsSource="{Binding Items, UpdateSourceTrigger=PropertyChanged}" 
                     BorderThickness="0"
                     ScrollViewer.VerticalScrollBarVisibility="Auto">
            </ItemsControl>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmDepsTree}">
            <TreeView ItemsSource="{Binding Nodes, UpdateSourceTrigger=PropertyChanged}" BorderThickness="0">
                <b:Interaction.Behaviors>
                    <util:BindableSelectedItemBehavior SelectedItem="{Binding SelectedTreeItem, Mode=TwoWay}"/>
                </b:Interaction.Behaviors>
                <TreeView.ItemContainerStyle>
                    <Style TargetType="TreeViewItem">
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                    </Style>
                </TreeView.ItemContainerStyle>
                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                        <TextBlock x:Name="txt" Text="{Binding Value.Display}" />
                        <HierarchicalDataTemplate.Triggers>
                            <DataTrigger Binding="{Binding IsMissing}" Value="true">
                                <Setter TargetName="txt" Property="TextBlock.Foreground" Value="Red"/>
                                <Setter TargetName="txt" Property="TextBlock.FontWeight" Value="Bold"/>
                            </DataTrigger> 
                        </HierarchicalDataTemplate.Triggers>
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
            </TreeView>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmTexts}">
            <ListView ItemsSource="{Binding GroupedItems}"
                      SelectedItem="{Binding SelectedItem, Mode=TwoWay}"
                      ItemContainerStyle="{StaticResource CustomListViewItemStyle}"
                      ScrollViewer.CanContentScroll="True"
                      VirtualizingStackPanel.IsVirtualizing="True"
                      VirtualizingStackPanel.VirtualizationMode="Recycling"
                      VirtualizingPanel.IsVirtualizingWhenGrouping="True"
                      ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                      ScrollViewer.VerticalScrollBarVisibility="Auto"
                      BorderThickness="0">
                <b:Interaction.Behaviors>
                    <util:ScrollToSelectedBehavior InvokeScroll="{Binding InvokeScroll, Mode=TwoWay}" />
                </b:Interaction.Behaviors>
                <ListView.ItemsPanel>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel />
                    </ItemsPanelTemplate>
                </ListView.ItemsPanel>

                <ListView.GroupStyle>
                    <StaticResource ResourceKey="GroupHeaderStyle" />
                </ListView.GroupStyle>
            </ListView>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmImages}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <ListView Grid.Row="1" BorderThickness="0"
                          ItemsSource="{Binding GroupedItems, Mode=OneWay}" 
                          SelectedItem="{Binding SelectedItem, Mode=TwoWay}"
                          ItemContainerStyle="{StaticResource CustomListViewItemStyle}"
                          VirtualizingStackPanel.IsVirtualizing="True"
                          VirtualizingStackPanel.VirtualizationMode="Recycling"
                          VirtualizingPanel.IsVirtualizingWhenGrouping="True"
                          ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                          ScrollViewer.VerticalScrollBarVisibility="Auto">
                    <b:Interaction.Behaviors>
                        <util:ScrollToSelectedBehavior InvokeScroll="{Binding InvokeScroll, Mode=TwoWay}" />
                    </b:Interaction.Behaviors>
                    <ListView.ItemsPanel>
                        <ItemsPanelTemplate>
                            <controls:VirtualizingWrapPanel/>
                        </ItemsPanelTemplate>
                    </ListView.ItemsPanel>
                    <ListView.GroupStyle>
                        <StaticResource ResourceKey="GroupHeaderStyle" />
                    </ListView.GroupStyle>
                </ListView>

            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmTextElement}">
            <StackPanel Orientation="Horizontal" Margin="2">
                <CheckBox IsChecked="{Binding IsChecked}" Margin="0 0 0 0" 
                          Visibility="{Binding IsEditMode, RelativeSource={RelativeSource AncestorType=window:CustomWindow}, Converter={StaticResource BoolToVisibilityConverter}}">
                     <b:Interaction.Triggers>
                        <b:EventTrigger EventName="Checked">
                            <b:InvokeCommandAction Command="{Binding DataContext.CmdOnChecked, RelativeSource={RelativeSource AncestorType=ItemsControl}}"
                                                   CommandParameter="{Binding}" />
                        </b:EventTrigger>
                        <b:EventTrigger EventName="Unchecked">
                            <b:InvokeCommandAction Command="{Binding DataContext.CmdOnUnchecked, RelativeSource={RelativeSource AncestorType=ItemsControl}}"
                                                   CommandParameter="{Binding}" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </CheckBox>
                <TextBlock Text="{Binding Value}" Margin="2 0 0 0"/>
            </StackPanel>

        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmStatTable}">
            <DataGrid ItemsSource="{Binding Items}"
                      BorderBrush="Gray"
                      AutoGenerateColumns="False"
                      AllowDrop="False"
                      CanUserReorderColumns="False"
                      CanUserResizeRows="False"
                      HeadersVisibility="All"
                      IsReadOnly="True"
                      GridLinesVisibility="None"
                      RowHeaderWidth="0"
                      SelectionMode="Single"
                      SelectionUnit="FullRow"
                      IsHitTestVisible="True"
                      Focusable="False"
                      IsTabStop="False">
                <DataGrid.Resources>
                    <Style TargetType="DataGridRow">
                        <Setter Property="IsHitTestVisible" Value="True"/>
                        <Setter Property="Focusable" Value="True"/>
                        <Setter Property="Background" Value="White"/>
                    </Style>
                </DataGrid.Resources>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Elements" Binding="{Binding Name}" Width="*"/>
                    <DataGridTextColumn Header="Loaded" Binding="{Binding Loaded}" Width="Auto" MinWidth="100"/>
                    <DataGridTextColumn Header="Archived" Binding="{Binding Archived}" Width="Auto" MinWidth="100"/>
                    <DataGridTextColumn Header="Total" Binding="{Binding Total}" Width="Auto" MinWidth="100"/>
                </DataGrid.Columns>
            </DataGrid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmToolVam}">
            <Grid Margin="4">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Loaded">
                        <b:InvokeCommandAction Command="{Binding DtLoadedCmd}" />
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="66"/>
                </Grid.ColumnDefinitions>

                <StackPanel Margin="2" Grid.Row="0" Grid.ColumnSpan="3" Orientation="Horizontal">
                    <TextBlock Text="Settings" FontWeight="SemiBold" FontSize="13"/>
                </StackPanel>

                <TextBlock Margin="2" Grid.Row="1" Grid.Column="0" Text="Loaded (VaM root) folder:"/>
                <TextBox Margin="2" Grid.Row="1" Grid.Column="1" Text="{Binding VamPath}" IsReadOnly="True"/>
                <Grid Margin="2" Grid.Row="1" Grid.Column="2" HorizontalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                         <ColumnDefinition Width="30"/>
                         <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Button Content="..." Command="{Binding CmdSetVamFolder}" ToolTip="Change"/>
                    <Button Margin="2 0 0 0" Grid.Column="1" Content="&#x1F4C2;" Command="{Binding CmdOpenVamFolder}" ToolTip="Open in File Explorer"/>
                </Grid>

                <TextBlock Margin="2" Grid.Row="2" Grid.Column="0" Text="Archive folder:"/>
                <TextBox Margin="2" Grid.Row="2" Grid.Column="1" Text="{Binding VamArchivePath}"/>
                <Grid Margin="2" Grid.Row="2" Grid.Column="2" HorizontalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Button Content="..." Command="{Binding CmdSetVamArchiveFolder}" ToolTip="Change"/>
                    <Button Margin="2 0 0 0" Grid.Column="1" Content="&#x1F4C2;" Command="{Binding CmdOpenVamArchiveFolder}" ToolTip="Open in File Explorer"/>
                </Grid>

                <TextBlock Margin="2" Grid.Row="3" Grid.Column="0" Text="References folder:"/>
                <TextBox Margin="2" Grid.Row="3" Grid.Column="1" Text="{Binding ReferencesPath}" IsReadOnly="True"/>
                <Grid Margin="2" Grid.Row="3" Grid.Column="2" HorizontalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Button Content="..." Command="{Binding CmdSetReferenceFolder}" ToolTip="Change"/>
                    <Button Margin="2 0 0 0" Grid.Column="1" Content="&#x1F4C2;" Command="{Binding CmdOpenReferenceFolder}" ToolTip="Open in File Explorer"/>
                </Grid>

                <TextBlock Margin="2" Grid.Row="4" Grid.Column="0" Text="Cache folder:"/>
                <TextBox Margin="2" Grid.Row="4" Grid.Column="1" Text="{Binding ImageCachePath}" IsReadOnly="True"/>
                <Grid Margin="2" Grid.Row="4" Grid.Column="2" HorizontalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Button Content="..." Command="{Binding CmdImageCachePath}" ToolTip="Change"/>
                    <Button Margin="2 0 0 0" Grid.Column="1" Content="&#x1F4C2;" Command="{Binding CmdOpenImageCachePath}" ToolTip="Open in File Explorer"/>
                </Grid>

                <TextBlock Margin="2" Grid.Row="5" Grid.Column="0" Text="User folders:"/>
                <ContentControl Margin="2" Grid.Row="5" Grid.Column="1" Grid.ColumnSpan="2" Content="{Binding UserFolders}" Height="120"/>

                <TextBlock Margin="2" Grid.Row="6" Grid.Column="0" Text="Custom VaM`s shortcut:"/>
                <TextBox Margin="2" Grid.Row="6" Grid.Column="1" Text="{Binding ShortcutVam}" IsReadOnly="True"/>
                <Grid Margin="2" Grid.Row="6" Grid.Column="2" HorizontalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Button Content="..." Command="{Binding CmdSetVamShortcut}" ToolTip="Change" Grid.ColumnSpan="2"/>
                </Grid>

                <StackPanel Margin="2" Grid.Row="7" Grid.Column="0" Grid.ColumnSpan="3" Orientation="Vertical">
                    <CheckBox Margin="0 2 2 2" IsChecked="{Binding AutoScan}" Content="Run scan on application start"/>
                    <CheckBox Margin="0 2 2 2" IsChecked="{Binding EnableFilterHideFavTagFeature}" Content="Enables filtering of items by Hide, Fav, and Tags (slows down the Scan)" ToolTip="Does not affect the ability to modify Hide, Fav, or Tags. To apply the effect, a re-Scan must be performed."/>
                    <CheckBox Visibility="Collapsed" Margin="0 2 2 2" IsChecked="{Binding UseMaxAvailableVarVersion}" Content="Use the latest available version of the var during the sync process"/>
                    <CheckBox Margin="0 2 2 2" IsChecked="{Binding RunVamViaShortcut}" IsEnabled="{Binding RunVamViaShortcutIsEnabled}" Content="Launch VaM using a custom shortcut" ToolTip="If the 'Custom VaM`s shortcut' is present, VaM will be launched using it; otherwise, VaM will be launched via VaM (Desktop Mode).bat"/>
                    <CheckBox Margin="0 2 2 2" IsChecked="{Binding IsWindowTopmost}" Content="Main Window: Always on Top"/>
                </StackPanel>

                <Grid Grid.Row="8" Grid.Column="0" Grid.ColumnSpan="3">
                    <StackPanel Orientation="Vertical" VerticalAlignment="Top" Visibility="{Binding StatTable.IsVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                        <TextBlock Text="Statistics" FontWeight="SemiBold" FontSize="13" Margin="0 30 0 4"/>
                        <ContentControl Content="{Binding StatTable}"/>
                    </StackPanel>
                </Grid>
            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmToolVar}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="3*" />
                    <ColumnDefinition Width="Auto" /> <!-- Splitter -->
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                
                <DockPanel Grid.Row="0" Grid.ColumnSpan="2" Margin="4 4 4 4" >
                    <ItemsControl ItemsSource="{Binding TabCmds}" Margin="4 0 0 0"/>
                    <TextBlock Text="Items:" VerticalAlignment="Center"/>
                    <TextBlock Text="{Binding Count}" VerticalAlignment="Center"/>

                    <ToggleButton Content="Browsing mode" Style="{StaticResource ModernToggleSwitch}" Height="20" Width="120" Margin="14, 0 ,0 ,0" IsChecked="{Binding BrowsingMode}"
                                  ToolTip="Viewing the contents of the var file. When this mode is enabled, all tabs except the Var tab display the contents of the selected item on the Var tab.&#13;&#10;In this mode, filters apply only to the Var tab."/>
                    <TextBlock Text="Var:" Margin="14,-1,0,0" VerticalAlignment="Center" Visibility="{Binding BrowsingMode, Converter={StaticResource BoolToVisibilityConverter}}"/>
                    <TextBlock Text="{Binding BrowsedVar, TargetNullValue=none}" Margin="4,-1,0,0" VerticalAlignment="Center" Visibility="{Binding BrowsingMode, Converter={StaticResource BoolToVisibilityConverter}}"/>

                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0 0 4 0">
                        <TextBlock Text="Image size:"  Margin="0 0 4 0"/>
                        <Slider Width="130" Minimum="50" Maximum="512" TickFrequency="1" IsSnapToTickEnabled="True"
                                Value="{Binding Path=ImgSize, Mode=TwoWay, Source={x:Static util:UIState.Instance}}"
                                ToolTip="{Binding Path=Value, RelativeSource={RelativeSource Mode=Self}}"/>
                    </StackPanel>
                </DockPanel>

                <TabControl Margin="4 0 0 4" Grid.Row="1" Grid.Column="0" ItemsSource="{Binding Tabs}" SelectedItem="{Binding SelectedTab}" ItemContainerStyle="{StaticResource TabHeaderStyle}" IsTabStop="False"/>

                <GridSplitter Grid.Column="1" Grid.Row="1"
                              Width="4"
                              Background="Transparent"
                              HorizontalAlignment="Stretch"
                              VerticalAlignment="Stretch"
                              ShowsPreview="True" />

                <ContentPresenter Margin="0 0 4 4" Grid.Column="2" Grid.Row="0" Grid.RowSpan="2" Content="{Binding PropertyView}"/>

                <TextBlock Margin="4 0 4 4" Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="3" Text="{Binding StatusLine}"/>
            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmToolUserData}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="3*" />
                    <ColumnDefinition Width="Auto" /> <!-- Splitter -->
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                
                <DockPanel Grid.Row="0" Grid.ColumnSpan="2" Margin="4 4 4 4" >
                    <ItemsControl ItemsSource="{Binding TabCmds}" Margin="4 0 0 0" />
                    <TextBlock Text="Items:" VerticalAlignment="Center"/>
                    <TextBlock Text="{Binding Count}" VerticalAlignment="Center"/>
                    <Border BorderThickness="0" x:Name="marginFixer" Width="0" Height="20" Margin="14, 0 ,0 ,0"/>

                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0 0 4 0">
                        <TextBlock Text="Image size:"  Margin="0 0 4 0"/>
                        <Slider Width="130" Minimum="50" Maximum="512" TickFrequency="1" IsSnapToTickEnabled="True"
                                Value="{Binding Path=ImgSize, Mode=TwoWay, Source={x:Static util:UIState.Instance}}"
                                ToolTip="{Binding Path=Value, RelativeSource={RelativeSource Mode=Self}}"/>
                    </StackPanel>
                </DockPanel>

                <TabControl Margin="4 0 0 4" Grid.Row="1" Grid.Column="0" ItemsSource="{Binding Tabs}" SelectedItem="{Binding SelectedTab}" ItemContainerStyle="{StaticResource TabHeaderStyle}"/>

                    <GridSplitter Grid.Column="1" Grid.Row="1"
                                  Width="4"
                                  Background="Transparent"
                                  HorizontalAlignment="Stretch"
                                  VerticalAlignment="Stretch"
                                  ShowsPreview="True" />

                <ContentPresenter Margin="0 0 4 4" Grid.Column="2" Grid.Row="0" Grid.RowSpan="2" Content="{Binding PropertyView}"/>

                <TextBlock Margin="4 0 4 4" Grid.Column="0" Grid.Row="2" Grid.ColumnSpan="3" Text="{Binding StatusLine}"/>
            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmPropertyTabs}">
            <TabControl Margin="0 0 0 0" ItemsSource="{Binding Tabs}" SelectedItem="{Binding SelectedTab}" DisplayMemberPath="NameFull"/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmRefs}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <StackPanel Margin="0 0 0 0" Orientation="Horizontal">
                    <ItemsControl ItemsSource="{Binding Cmds}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                    </ItemsControl>
                </StackPanel>
                <ListView Grid.Row="1" x:Name="lv" ItemsSource="{Binding Items}" SelectedItem="{Binding SelectedItem}" BorderThickness="0" util:ListViewDragDropBehavior.EnableDragDrop="True">
                    <ListView.ItemContainerStyle>
                        <Style TargetType="{x:Type ListViewItem}">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter Property="BorderThickness" Value="0 0 0 0"/>
                            <Setter Property="Height" Value="26"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="LightBlue"/>
                                </Trigger>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="LightBlue"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ListView.ItemContainerStyle>
                    <ListView.View>
                        <GridView AllowsColumnReorder="False">
                            <GridViewColumn Header="Name" Width="140">
                                <GridViewColumn.HeaderContainerStyle>
                                    <Style TargetType="GridViewColumnHeader">
                                        <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                    </Style>
                                </GridViewColumn.HeaderContainerStyle>
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal" Margin="2" Background="Transparent">
                                            <CheckBox IsChecked="{Binding IsEnabled}"/>
                                            <TextBlock Text="{Binding Display}" Margin="2 -1 0 0" x:Name="_disp"/>
                                        </StackPanel>
                                        <DataTemplate.Triggers>
                                            <DataTrigger Binding="{Binding Path=Ops, Converter={StaticResource RefOpsVisibilityConverter}, ConverterParameter=end}" Value="Visible">
                                                <DataTrigger.Setters>
                                                    <Setter TargetName="_disp" Property="FontWeight" Value="Bold"/>
                                                </DataTrigger.Setters>
                                            </DataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Header="Actions" Width="140">
                                <GridViewColumn.HeaderContainerStyle>
                                    <Style TargetType="GridViewColumnHeader">
                                        <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                    </Style>
                                </GridViewColumn.HeaderContainerStyle>
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch">

                                                <Button Style="{StaticResource EyeButtonStyle}" 
                                                    Command="{Binding DataContext.CmdBeginView, ElementName=lv}"
                                                    CommandParameter="{Binding}"
                                                    Visibility="{Binding Path=Ops, Converter={StaticResource RefOpsVisibilityConverter}, ConverterParameter=btn}"
                                                    Padding="5,0"/>

                                                <Button Style="{StaticResource EditButtonStyle}" 
                                                        Command="{Binding DataContext.CmdBeginEdit, ElementName=lv}"
                                                        CommandParameter="{Binding}"
                                                        Visibility="{Binding Path=Ops, Converter={StaticResource RefOpsVisibilityConverter}, ConverterParameter=btn}"
                                                        Padding="5,0"/>

                                                <Button Style="{StaticResource RenameButtonStyle}" 
                                                        Command="{Binding DataContext.CmdRename, ElementName=lv}"
                                                        CommandParameter="{Binding}"
                                                        Visibility="{Binding Path=Ops, Converter={StaticResource RefOpsVisibilityConverter}, ConverterParameter=btn}"
                                                        Padding="5,0"/>

                                                <Button Style="{StaticResource CrossButtonStyle}"
                                                        Command="{Binding DataContext.CmdRemove, ElementName=lv}"
                                                        CommandParameter="{Binding}"
                                                        Visibility="{Binding Path=Ops, Converter={StaticResource RefOpsVisibilityConverter}, ConverterParameter=btn}"
                                                        Padding="5,0"/>

                                                <Button Command="{Binding DataContext.CmdEnd, ElementName=lv}"
                                                        Width="75"
                                                        Visibility="{Binding Path=Ops, Converter={StaticResource RefOpsVisibilityConverter}, ConverterParameter=end}"
                                                        Padding="5,0">
                                                    <Button.Content>
                                                        <TextBlock Text="End" Margin="4 0 4 0"/>
                                                    </Button.Content>
                                                </Button>
                                            </StackPanel>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                        </GridView>
                    </ListView.View>
                </ListView>
            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:VmUserFolders}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <control:WatermarkTextBox Grid.Row="0" Grid.Column="1" Text="{Binding Text}" TextWrapping="Wrap" AcceptsReturn="True"
                                          Watermark="Enter user folders here&#x0a;If you have resources located outside the default VaM folders, specify them here to allow the VaM Resource Manager to process them. A space, comma, semicolon, or similar character can be used as a separator. User folders must be specified as relative paths to the VaM base path and must already exist."/>
                <Button Margin="0 4 0 0" Grid.Row="1" Grid.Column="1" Content="Save" Command="{Binding CmdSave}" HorizontalAlignment="Right" Width="100"/>

            </Grid>
        </DataTemplate>

    </Application.Resources>
</Application>